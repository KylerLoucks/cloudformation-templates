Resources:
  lambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ChimeSDKAPI
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - chime:*
                Resource: "*"


  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Sample Lambda # Change this
      Runtime: python3.9
      Role: !GetAtt lambdaRole.Arn
      Environment:
        Variables:
          ACCOUNT_ID: !Sub ${AWS::AccountId}
      Handler: index.handler
      Timeout: 240
      Code:
        ZipFile: !Sub |
          import requests
          import json

          webhook_url = ""
          def handler(event):
              print(json.dumps(event))
              # message = {
              #     "channel": "<#notification-slack-channel>",
              #     "username": "<slack-bot-name>",
              #     "icon_emoji": ":uh-oh-sooj:",
              #     "attachments": [
              #         {
              #             "fallback": "CICD: <https://google.com/|open link here>", # Hyperlink
              #             "pretext": "CICD: <https://google.com/|open link here>",
              #             "color": "#34bb13",
              #             "fields": [
              #                 {
              #                     "title": "Server",
              #                     "value": "server is starting!!"
              #                 }
              #             ]
              #         }
              #     ]
              # }

              # response = requests.post(url=webhook_url, data=json.dumps(message))

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunction}
      RetentionInDays: 90


  permissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref lambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        !GetAtt eventBridgeRule.Arn

  eventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CodePipelineStateChangeRule
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - AWS CodePipeline Pipeline Execution State Change
        detail:
          state:
            - STARTED
            - SUCCEEDED
            - FAILED
            - CANCELED
          type:
            category:
              - Source
              - Approval
              - Deploy
              - Build
        resources:
          - !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:s3-pipeline-test"
      Targets:
        - Arn: !GetAtt lambdaFunction.Arn
          Id: targetFunction